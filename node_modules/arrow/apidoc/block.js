/**
 * @class Arrow.Block
 * A Block is a function that is executed before or after calling an API endpoint.
 *
 * To create a block, pass the constructor an implementation object, API Builder configuration object
 * and API Builder instance to create a block instance, then pass the Block instance to the
 * API Builder instance's {@link Arrow#addBlock addBlock()} method.
 *
 *     var block = new Arrow.Block({
 *         name: 'blocky',
 *         execute: function (request, response, next) {
 *             next();
 *         }
 *     });
 *     server.addBlock(block);
 *
 * To use a block, assign it to the `before` or `after` property of the implementation object
 * passed to the API or Model constructor. A Block is identified by its `name` property.
 * You may specify more than one block by using an array. The blocks will be executed in order.
 *
 *     var fooAPI = new Arrow.API({
 *         group: 'foo',
 *         path: '/api/foo/',
 *         method: 'GET',
 *         description: 'Get all the Foo objects',
 *         before: ['block1', 'block2'],
 *         model: 'testuser',
 *         action: function(request, response, next) {
 *             request.model.findAll(function(err, results) {
 *                 if (err) {
 *                     next(err);
 *                 } else {
 *                     next(null, results);
 *                 }
 *             });
 *         }
 *     }, server.config, server);
 *     fooAPI.bind(server.app);
 *
 * Alternatively, you can define your Blocks using JavaScript files. For details, see the
 * [API Builder Blocks guide](https://docs.axway.com/bundle/API_Builder_allOS_en/page/api_builder_blocks.html).
 */

/**
 * @constructor
 * Creates an new instance of a Block.
 * @param {Dictionary<Arrow.Block>} impl Implementation object.
 * Set any Block properties on the object except the ones marked non-creation.
 * The {@link #name} property must be set.
 * @param {Object} config API Builder configuration object.
 * @param {Arrow} arrow API Builder instance.
 * @throws Error Missing `name` parameter.
 */

/**
 * @property {Arrow} arrow
 * @nonCreation
 * API Builder instance associated with the Block instance.
 */
/**
 * @property {Object} config
 * @nonCreation
 * Configuration object used to initialize the Block instance.
 */
/**
 * @property {Function} constructor
 * Custom constructor to execute custom initialization logic. The new block instance is passed to
 * `this` in the function.
 */
/**
 * @property {String} description
 * Human-readable description of the block, which is used by the generated API documentation.
 */
/**
 * @property {Function} execute
 * Logic to execute. The function is passed a `request` object, `response` object and `next()` callback.
 * After the operation completes, call the `next()` function.
 */
/**
 * @property {String} filename
 * @nonCreation
 * File used to load the Block instance.
 */
/**
 * @property {String} name
 * Name used to identify the block.
 */
