/**
 * This code is closed source and Confidential and Proprietary to
 * Appcelerator, Inc. All Rights Reserved.  This code MUST not be
 * modified, copied or otherwise redistributed without express
 * written permission of Appcelerator. This file is licensed as
 * part of the Appcelerator Platform and governed under the terms
 * of the Appcelerator license agreement.
 */
var spawn = require('child_process').spawn;

/**
 * Helper to process output.
 *
 * @param appc
 * @param proc
 */
function processData(appc, proc) {
	proc.stdout.on('data', function (data) {
		appc.log.debug(data.toString());
	});

	proc.stderr.on('data', function (data) {
		appc.log.error(data.toString());
	});
}

/**
 * Generate image repo name.
 *
 * @param appname
 * @param orgid
 * @param dockerRegistryURL
 */
exports.getImageRepoName = function (appname, orgid, dockerRegistryURL) {
	if (dockerRegistryURL.substr(-1) === '/') {
		dockerRegistryURL = dockerRegistryURL.substring(0, dockerRegistryURL.length - 1);
	}

	return dockerRegistryURL + '/' + orgid + '/' + appname;
};

/**
 * Remove docker image from build machine after it's pushed to docker registry.
 * @param imageId
 * @param callback
 */
exports.removeDockerImage = function (appc, imageId, callback) {
	appc.log.debug('Removing docker image ' + imageId);
	var drmi = spawn('docker', [ 'rmi', imageId ]);
	processData(appc, drmi);

	drmi.on('exit', function (code) {
		if (code !== 0) {
			return callback('Failed to remove docker image.');
		}
		return callback();
	});
};

/**
 * Tag docker image of an app.
 * @param imageRepoNameLocal
 * @param imageRepoNameRemote
 * @param version
 * @param callback
 */
exports.tagDockerImage = function (appc, imageRepoNameLocal, imageRepoNameRemote, version, callback) {
	var tag = imageRepoNameRemote + ':' + version;
	appc.log.debug('Creating a tag that ' + tag + ' refers to docker image ' + imageRepoNameLocal);
	var dtag = spawn('docker', [ 'tag', imageRepoNameLocal, tag ]);
	processData(appc, dtag);

	dtag.on('exit', function (code) {
		if (code !== 0) {
			return callback('Failed to tag docker image.');
		}
		return callback();
	});
};

/**
 * Build docker image.
 *
 * @param imageRepoName
 * @param dir
 * @param buildCallback
 */
exports.buildDockerImage = function (appc, imageRepoName, dir, callback) {
	appc.log.debug('Building docker image ...');
	var dbuild = spawn('docker', [ 'build', '-t', imageRepoName, dir ]);
	processData(appc, dbuild);

	dbuild.on('exit', function (code) {
		if (code !== 0) {
			return callback('Failed to build docker image.');
		}
		return callback();
	});
};

/**
 * Login to docker registry.
 *
 * @param dockerRegistryAuthConfig
 * @param dockerRegistryURL
 * @param loginCallback
 */
exports.loginDockerReg = function (appc, dockerRegistryAuthConfig, dockerRegistryURL, callback) {
	appc.log.debug('Login to docker registry ...');
	var dlogin = spawn('docker', [ 'login', '-u', dockerRegistryAuthConfig.username, '-p', dockerRegistryAuthConfig.password, dockerRegistryURL ]);
	processData(appc, dlogin);

	dlogin.on('exit', function (code) {
		if (code !== 0) {
			return callback('Failed to login to docker registry.');
		}
		return callback();
	});
};

/**
 * Push docker image to docker registry.
 *
 * @param imageRepoName
 * @param pushCallback
 */
exports.pushDockerImage = function (appc, imageRepoName, callback) {
	appc.log.debug('Pushing image to docker registry ...');
	var dpush = spawn('docker', [ 'push', imageRepoName ]);
	processData(appc, dpush);

	dpush.on('exit', function (code) {
		if (code !== 0) {
			return callback('Failed to push image to docker registry.');
		}
		return callback();
	});
};

/**
 * Check if docker is installed
 *
 * @param pushCallback
 */
exports.isDockerInstalled = function (appc, callback) {
	appc.log.debug('Getting docker version.');
	var dversion = spawn('docker', [ 'version' ]);
	processData(appc, dversion);

	dversion.on('exit', function (code) {
		if (code !== 0) {
			return callback('Docker is not installed.');
		}
		return callback();
	});
};

/**
 * Execute docker inspect
 *
 * @param opts
 * @param callback
 */
exports.doDocketInspect = function (appc, opts, callback) {
	appc.log.debug('Docket inspect ', opts);

	var inspectOpts = [ 'inspect' ].concat(opts.args || []),
		dinspect,
		result = '';

	inspectOpts.push(opts.image);
	dinspect = spawn('docker', inspectOpts);

	dinspect.stdout.on('data', function (data) {
		appc.log.debug(data.toString());
		result += data.toString();
	});

	dinspect.stderr.on('data', function (data) {
		appc.log.error(data.toString());
	});

	dinspect.on('exit', function (code) {
		if (code !== 0) {
			return callback('Failed to execute docker inspect');
		}
		return callback(null, result.trim());
	});
};
