const Arrow = require('arrow');

/**
 * Start the API Builder server.
 * @return {Object} The details for the started server.
 * @property  {Arrow} arrow The arrow server.
 * @property  {Promise} started The promise that resolves when the server is started.
 */
function startApiBuilder(config) {
	var server = new Arrow(Object.assign({},
		{
			dir: process.cwd(),
			apikey: 'test',
			APIKeyAuthType: 'basic',
			overrideLevel: 'FATAL'
		},
		config
	));

	var startPromise = new Promise((resolve, reject) => {
		server.on('error', reject);
		server.on('started', resolve);
		server.start();
	});

	return {
		arrow: server,
		started: startPromise
	};
}

/**
 * Stop the API Builder server.
 * @param {Object} server The object returned from startApiBuilder().
 * @return {Promise} The promise that resolves when the server is stopped.
 */
function stopApiBuilder(server) {
	return new Promise((resolve, reject) => {
		server.started
			.then(() => {
				server.arrow.stop(() => {
					Arrow.resetGlobal();
					resolve();
				});
			})
			.catch(err => {
				reject(err);
			});
	});
}

exports = module.exports = {
	startApiBuilder,
	stopApiBuilder,
};
