const { expect } = require('chai');
const { startApiBuilder, stopApiBuilder } = require('./_base');
const request = require('request');

describe('APIs', function () {
	this.timeout(30000);
	let server;
	let user;

	/**
	 * Start API Builder and create a user.
	 */
	before(() => {
		server = startApiBuilder();
		return server.started.then(
			() => new Promise((resolve, reject) => {
				server.arrow.getModel('testuser').create(
					{
						first_name: 'Johnny',
						last_name: 'Test',
						email: 'jtest@axway.com'
					},
					(err, result) => {
						if (err) {
							reject(err);
						} else {
							user = result;
							resolve(user);
						}
					});
			})
		);
	});

	/**
	 * Stop API Builder after the tests.
	 */
	after(() => stopApiBuilder(server));

	describe('testapi', () => {
		it('[API-0001] should be able to hit testapi programmatically', (done) => {
			const api = server.arrow.getAPI('/api/testapi/:id');
			expect(api).to.not.be.undefined;
			api.execute({ id: user.getPrimaryKey() }, (err, result) => {
				expect(err).to.be.null;
				expect(result).to.have.property('success', true);
				expect(result).to.have.property('request-id');
				expect(result).to.have.property('key', 'testuser');
				expect(result).to.have.property('testuser');
				expect(result.testuser).to.have.property('id');
				expect(result.testuser).to.have.property('first_name', user.first_name);
				expect(result.testuser).to.have.property('last_name', user.last_name);
				expect(result.testuser).to.have.property('email', user.email);
				done();
			});
		});

		it('[API-0002] should be able to hit testapi via http', (done) => {
			const auth = {
				user: 'test',
				password: ''
			};
			request({
				method: 'GET',
				uri: `http://localhost:${server.arrow.port}/api/testapi/${user.getPrimaryKey()}`,
				auth: auth,
				json: true
			}, (err, response, result) => {
				expect(result).to.have.property('success', true);
				expect(result).to.have.property('request-id');
				expect(result).to.have.property('key', 'testuser');
				expect(result).to.have.property('testuser');
				expect(result.testuser).to.have.property('id');
				expect(result.testuser).to.have.property('first_name', user.first_name);
				expect(result.testuser).to.have.property('last_name', user.last_name);
				expect(result.testuser).to.have.property('email', user.email);
				done();
			});
		});
	});
});
