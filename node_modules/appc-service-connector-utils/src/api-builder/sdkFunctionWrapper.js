/**
 * This is a simple wrapper of the connector sdk function for the sake of API Builder.
 * Usually SDK function works in the context of API Builder.
 * So we need its instance to obtain the connector SDK config as well as the function isntance we would like to wrap.
 *
 * @param {Object} config connector configuration provided from the API Builder application
 * @param {Object} sdkFunc sdk function that must be invoked within the created wrapper
 */
module.exports = (config, sdkFunc) => {
  return (req, cb) => {
    try {
      if (validate(req, cb)) {
        sdkFunc(req.params, (err, resp) => {
          let code
          if (err) {
            code = err.httpCode
            if (!code) {
              // In case of a runtime error we do not have httpCode
              cb(new Error(err.content))
            } else {
              if (!cb[code]) {
                cb(new Error(`Missing corresponding callback for the returned http code: ${code}`))
              } else {
                cb[code](null, err.content)
              }
            }
          } else if (resp) {
            code = resp.httpCode || '200'
            if (!cb[code]) {
              cb(new Error(`Missing corresponding callback for the returned http code: ${code}`))
            } else {
              cb[code](null, resp.content)
            }
          } else {
            cb(new Error('No information to call back API Builder with. Please contact the Support Team.'))
          }
        }, config)
      }
    } catch (e) {
      cb(e)
    }
  }

  function validate (req, cb) {
    if (!cb) {
      throw new Error('Missing input parameters for SDK function invocation - cb')
    }
    if (!req) {
      cb(new Error('Missing input parameters for SDK function invocation - req'))
      return false
    }
    if (!req.params) {
      cb(new Error('Missing input parameters for SDK function invocation - req.params'))
      return false
    }
    return true
  }
}
