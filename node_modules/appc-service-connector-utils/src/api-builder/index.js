/**
 * API Builder interface for doing registration and unregistration of Service Connector within API Builder.
 *
 * @param {String} connectorPath the path to the connector
 * @param {String} connectorName the name of the connector
 * @param {Object} apiDefinition swagger definition as JavaScript object
 * @param {Object} sdk sdk created based on the swagger definition
 */
module.exports = (connectorPath, connectorName, apiDefinition, sdk) => {
  const nodeHandlerUriBaseName = 'service-connector'
  const defaultServiceName = 'defaultService'
  const serviceName = (apiDefinition.info && apiDefinition.info.title) ? apiDefinition.info.title : defaultServiceName
  const uriName = serviceName.replace(/[^\\./a-zA-Z0-9-_]+/ig, '')

  return {
    register: (arrow) => {
      validateArrowInstance(arrow)
      const NodeHandlerUtils = require('nodehandler-utils')
      const getServiceConnectorConstructor = require('./serviceConnector')
      const config = (arrow.config && arrow.config.connectors && arrow.config.connectors[connectorName]) || {}
      const uriPath = arrow.flowManager.formatNodeHandlerUri(nodeHandlerUriBaseName, uriName)
      NodeHandlerUtils.registerSchemas(apiDefinition, uriName)
      arrow.flowManager.registerNode(uriPath,
        getServiceConnectorConstructor(config, sdk),
        function () {
          const icon = require('../utils').loadIcon(connectorPath)
          return NodeHandlerUtils.swaggerToNodeHandlerSpec(apiDefinition, serviceName, uriPath, icon)
        }
      )
    },
    unregister: (arrow) => {
      validateArrowInstance(arrow)
      const uriPath = arrow.flowManager.formatNodeHandlerUri(nodeHandlerUriBaseName, uriName)
      arrow.flowManager.unregisterNode(uriPath)
    }
  }

  function validateArrowInstance (arrow) {
    if (!arrow) {
      throw new Error('arrow instance must be provided to unregister service connector')
    }
    if (!arrow.flowManager) {
      throw new Error('arrow.flowManager instance must be provided to unregister service connector')
    }
    if (typeof arrow.flowManager.registerNode !== 'function') {
      throw new Error('arrow.flowManager has no registerNode function')
    }
    if (typeof arrow.flowManager.unregisterNode !== 'function') {
      throw new Error('arrow.flowManager has no unregisterNode function')
    }
    if (typeof arrow.flowManager.formatNodeHandlerUri !== 'function') {
      throw new Error('arrow.flowManager has no formatNodeHandlerUri function')
    }
  }
}
