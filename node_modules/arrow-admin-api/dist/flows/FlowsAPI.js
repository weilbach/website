'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var APIProvider = require('../APIProvider');

/**
 * API for interacting with the Endpoints.
 * @public
 */

var FlowsAPI = function (_APIProvider) {
	_inherits(FlowsAPI, _APIProvider);

	function FlowsAPI() {
		_classCallCheck(this, FlowsAPI);

		return _possibleConstructorReturn(this, (FlowsAPI.__proto__ || Object.getPrototypeOf(FlowsAPI)).apply(this, arguments));
	}

	_createClass(FlowsAPI, null, [{
		key: 'bind',

		/**
   * Bind the paths to the controller methods.
   *
   * @param {EndpointsController} controller - The main controller providing the
   *                                         implementation for this API.
   */
		value: function bind(controller) {
			var swagger = controller.ctx.swagger;

			// https://techweb.axway.com/jira/browse/RDPP-2086
			// FIXME: Swagger 2.0 only supports a limited subset of JSON schema draft 04.
			// See: https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#schema-object
			// This means that it is not possible to represent our flow schema in a Swagger 2.0
			// document because we use things like (oneOf, allOf).  The only choice here is to upgrade to
			// use Swagger 3.0, which allegedly supports them
			// See: https://blog.readme.io/an-example-filled-guide-to-swagger-3-2/#formatchanges
			// When fixed, replace with:
			var flowschema = {
				// $ref: 'http://axway.com/schemas/flowschema.json#/flow-schema'
				type: 'object'
			};

			swagger.schema('FlowValidateResponse', {
				type: 'object'
			});

			swagger.get('/flows/:flowId').operationId('getFlow').tag('flow').summary('Gets a flow.').parameter({
				in: 'path',
				name: 'flowId',
				type: 'string',
				description: 'The unique id of the flow to retrieve.'
			}).response(200, 'OK', flowschema).response(404).response(500).action(function (req, res) {
				try {
					var flowId = void 0;
					if (req.params.flowId) {
						// decode group
						flowId = decodeURIComponent(req.params.flowId);
					}
					controller.getFlow(flowId).then(function (flow) {
						res.status(200).send(flow);
					}).catch(function (err) {
						APIProvider.handleError(err, res, 404, 500);
					});
				} catch (err) {
					APIProvider.handleError(err, res, 400, 500);
				}
			});

			swagger.put('/flows/validate').operationId('validateFlow').tag('flow').summary('Validates a flow and returns a validation response.  The property `valid` indicates whether or not the flow is valid or not.').parameter({
				in: 'body',
				name: 'flow',
				schema: flowschema,
				description: 'The flow to validate.'
			}).response(200, 'OK', 'FlowValidateResponse').response(400).response(500).action(function (req, res) {
				try {
					var flow = req.body;

					controller.validateFlow(flow).then(function (result) {
						res.status(200).send(result);
					}).catch(function (err) {
						APIProvider.handleError(err, res, 400, 500);
					});
				} catch (err) {
					APIProvider.handleError(err, res, 400, 500);
				}
			});

			swagger.post('/flows/:flowId').operationId('updateFlow').tag('flow').summary('Updates a flow, or creates it if it does not exist.').parameter({
				in: 'path',
				name: 'flowId',
				type: 'string',
				description: 'The unique id of the flow to update.'
			}).parameter({
				in: 'body',
				name: 'flow',
				schema: flowschema,
				description: 'The flow to update.'
			}).response(204).response(400).response(500).action(function (req, res) {
				try {
					var flowId = req.params.flowId ? decodeURIComponent(req.params.flowId) : null;
					var flow = req.body;

					controller.saveFlow(flowId, flow).then(function () {
						res.status(204).send();
						controller.ctx.arrow.emit('reload');
					}).catch(function (err) {
						APIProvider.handleError(err, res, 400, 500);
					});
				} catch (err) {
					console.error('error saving flow', err);
					APIProvider.handleError(err, res, 400, 500);
				}
			});
		}
	}]);

	return FlowsAPI;
}(APIProvider);

exports = module.exports = FlowsAPI;