'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Codeblock = require('./Codeblock');
var BadRequestError = require('../errors/BadRequestError');
var NotFoundError = require('../errors/NotFoundError');

/**
 * The controller implementing the actions for interacting with Codeblocks.
 * @public
 */

var CodeblockController = function () {
	/**
     * Create a CodeblockController.
     * @param {object} ctx - The context for this controller.
     * @param {express} ctx.app - The express application.
     * @param {string} ctx.prefix - The prefix bound to.
     * @param {Arrow} ctx.arrow - The Arrow server.
     * @param {boolean} ctx.devmode - Flag indicating if this is a devmode server.
     * @param {Swagger} ctx.swagger - openapi-doc instance.
     */
	function CodeblockController(ctx) {
		_classCallCheck(this, CodeblockController);

		this.ctx = ctx;
	}

	/**
  * Get codeblock by name.
  * @param {string} name - The codeblock name.
  * @return {Codeblock} The codeblock.
  */


	_createClass(CodeblockController, [{
		key: 'getCodeblock',
		value: function getCodeblock(name) {
			var _this = this;

			return new Promise(function (resolve, reject) {
				if (!name) {
					return reject(new BadRequestError());
				}

				var codeblock = _this.ctx.arrow.getCodeblock(name);
				if (!codeblock) {
					return reject(new NotFoundError());
				}
				return resolve(new Codeblock(codeblock));
			});
		}

		/**
   * Get all the codeblocks.
   * @return {Array<Codeblock>} The array of Codeblocks.
   */

	}, {
		key: 'getCodeblocks',
		value: function getCodeblocks() {
			var _this2 = this;

			return new Promise(function (resolve) {
				var codeblocks = _this2.ctx.arrow.getCodeblocks();
				return resolve(Object.keys(codeblocks).map(function (name) {
					return codeblocks[name];
				}));
			});
		}
	}]);

	return CodeblockController;
}();

exports = module.exports = CodeblockController;