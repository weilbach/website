'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var basicAuthParser = require('basic-auth');

function basicAuth(config) {
	var validEmails = config.admin && config.admin.validEmails || [];
	var validOrgs = config.admin && config.admin.validOrgs || [];

	return function authorize(req) {
		var auth = basicAuthParser(req);
		if (!auth) {
			return false;
		}

		// Username is org_id|email

		var _ref = auth.name && auth.name.split('|'),
		    _ref2 = _slicedToArray(_ref, 2),
		    orgId = _ref2[0],
		    email = _ref2[1];

		orgId = orgId && parseInt(orgId, 10) || undefined;
		var hasValidEmail = email !== undefined && validEmails.indexOf(email) !== -1;
		var hasValidOrg = orgId !== undefined && validOrgs.indexOf(orgId) !== -1;

		if (!hasValidEmail && !hasValidOrg) {
			return false;
		}

		// Authorized
		return true;
	};
}

exports = module.exports = {
	basicAuth: basicAuth
};