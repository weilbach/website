'use strict';

var fs = require('fs'),
    path = require('path'),
    Swagger = require('openapi-doc'),
    schemas = require('axway-schema'),
    nocache = require('nocache'),
    _require = require('./authz'),
    basicAuth = _require.basicAuth,
    APIsAPI = require('./api/APIsAPI'),
    APIsController = require('./api/APIsController'),
    CodeblocksAPI = require('./codeblocks/CodeblocksAPI'),
    CodeblocksController = require('./codeblocks/CodeblocksController'),
    ConfigurationAPI = require('./config/ConfigurationAPI'),
    ConfigurationController = require('./config/ConfigurationController'),
    ConnectorsAPI = require('./connectors/ConnectorsAPI'),
    ConnectorsController = require('./connectors/ConnectorsController'),
    EndpointsAPI = require('./endpoints/EndpointsAPI'),
    EndpointsController = require('./endpoints/EndpointsController'),
    FlowsAPI = require('./flows/FlowsAPI'),
    FlowsController = require('./flows/FlowsController'),
    LogsAPI = require('./logs/LogsAPI'),
    LogsController = require('./logs/LogsController'),
    ModelsAPI = require('./models/ModelsAPI'),
    ModelsController = require('./models/ModelsController'),
    ProjectAPI = require('./project/ProjectAPI'),
    ProjectController = require('./project/ProjectController'),
    SchemaAPI = require('./schema/SchemaAPI'),
    SchemaController = require('./schema/SchemaController'),
    SystemAPI = require('./system/SystemAPI'),
    SystemController = require('./system/SystemController'),
    TestAPI = require('./testapi/TestAPI'),
    TestController = require('./testapi/TestController'),
    TimelineAPI = require('./timeline/TimelineAPI'),
    TimelineController = require('./timeline/TimelineController'),
    NodehandlersAPI = require('./nodehandlers/NodehandlersAPI'),
    NodehandlersController = require('./nodehandlers/NodehandlersController');


function generateSwagger(openapidoc) {
	var rawdoc = openapidoc.apidoc();
	return schemas.dereference(rawdoc, {
		target: '#/definitions',
		rename: function rename(id) {
			if (id.endsWith('/flow-schema')) {
				return 'Flow';
			} else if (id.endswith('/codeblockmetadata.json')) {
				return 'Codeblock';
			}
			return path.basename(id);
		}
	});
}

function configure(app, prefix, arrow, devmode, swagger) {
	arrow.logger.trace('Configuring Console API, prefix:', prefix);

	swagger = swagger || new Swagger();

	swagger.info('API Builder Console API', '1.0', fs.readFileSync(path.join(__dirname, '../swaggerdoc.md'), 'utf8')).basePath(prefix).securityDefinition('basicAuth', {
		type: 'basic',
		description: 'Require authorized access to Arrow Admin APIs'
	}, basicAuth(arrow.config)).security('basicAuth').produces('application/json', true).consumes('application/json', true);

	var ctx = {
		app: app,
		prefix: prefix,
		arrow: arrow,
		devmode: devmode,
		swagger: swagger
	};

	var flowsController = new FlowsController(ctx);

	// define swagger API for all endpoints
	APIsAPI.bind(new APIsController(ctx), ctx);
	CodeblocksAPI.bind(new CodeblocksController(ctx), ctx);
	ConfigurationAPI.bind(new ConfigurationController(ctx), ctx);
	ConnectorsAPI.bind(new ConnectorsController(ctx), ctx);
	EndpointsAPI.bind(new EndpointsController(ctx, { flowsController: flowsController }), ctx);
	FlowsAPI.bind(flowsController, ctx);
	LogsAPI.bind(new LogsController(ctx), ctx);
	ModelsAPI.bind(new ModelsController(ctx), ctx);
	ProjectAPI.bind(new ProjectController(ctx), ctx);
	SchemaAPI.bind(new SchemaController(ctx), ctx);
	SystemAPI.bind(new SystemController(ctx), ctx);
	TimelineAPI.bind(new TimelineController(ctx), ctx);
	TestAPI.bind(new TestController(ctx), ctx);
	NodehandlersAPI.bind(new NodehandlersController(ctx), ctx);

	// bind swagger APIs
	Swagger.forEachAction(swagger, function (verb, operationPath) {
		try {
			var endpoint = Swagger.endpointToExpress(prefix + operationPath);
			arrow.logger.debug('binding admin api (' + verb + ') ' + endpoint);
			app[verb](endpoint, nocache(), Swagger.securityMiddleware(swagger, verb, operationPath), Swagger.actionMiddleware(swagger, verb, operationPath));
		} catch (ex) {
			arrow.logger.error(ex);
		}
	});

	// bind API doc
	app.get('/api-doc', function (req, resp) {
		resp.send(generateSwagger(swagger));
	});

	arrow.logger.debug('Configured API Builder Console API');
}

exports = module.exports = {
	configure: configure,
	generateSwagger: generateSwagger
};