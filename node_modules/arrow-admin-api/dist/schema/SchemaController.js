'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var axwaySchema = require('axway-schema');
var BadRequestError = require('../errors/BadRequestError');
var NotFoundError = require('../errors/NotFoundError');

/**
 * The controller implementing the actions for interacting with registered schemas.
 * @public
 */

var SchemaController = function () {
	/**
     * Create a SchemaController.
     * @param {object} ctx - The context for this controller.
     * @param {express} ctx.app - The express application.
     * @param {string} ctx.prefix - The prefix bound to.
     * @param {Arrow} ctx.arrow - The Arrow server.
     * @param {boolean} ctx.devmode - Flag indicating if this is a devmode server.
     * @param {Swagger} ctx.swagger - openapi-doc instance.
     */
	function SchemaController(ctx) {
		_classCallCheck(this, SchemaController);

		this.ctx = ctx;
		this.logger = this.ctx.arrow.logger;
	}

	_createClass(SchemaController, [{
		key: 'getSchema',
		value: function getSchema(id) {
			if (!id) {
				return Promise.reject(new BadRequestError());
			}
			return new Promise(function (resolve, reject) {
				var schema = axwaySchema.get(id);
				if (!schema) {
					reject(new NotFoundError());
				} else {
					resolve(schema);
				}
			});
		}
	}, {
		key: 'getSchemas',
		value: function getSchemas() {
			return new Promise(function (resolve) {
				resolve(axwaySchema.get() || []);
			});
		}
	}]);

	return SchemaController;
}();

exports = module.exports = SchemaController;