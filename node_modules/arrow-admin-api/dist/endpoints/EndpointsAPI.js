'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var APIProvider = require('../APIProvider');
var Endpoints = require('./schema/Endpoints');
var GroupSummary = require('../api/schema/GroupSummary');
var Status = require('../api/schema/Status');

/**
 * API for interacting with the Endpoints.
 * @public
 */

var EndpointsAPI = function (_APIProvider) {
	_inherits(EndpointsAPI, _APIProvider);

	function EndpointsAPI() {
		_classCallCheck(this, EndpointsAPI);

		return _possibleConstructorReturn(this, (EndpointsAPI.__proto__ || Object.getPrototypeOf(EndpointsAPI)).apply(this, arguments));
	}

	_createClass(EndpointsAPI, null, [{
		key: 'bind',

		/**
      * Bind the paths to the controller methods.
      *
      * @param {EndpointsController} controller - The main controller providing the
      *                                         implementation for this API.
      */
		value: function bind(controller) {
			var swagger = controller.ctx.swagger;

			// https://techweb.axway.com/jira/browse/RDPP-2086
			// FIXME: Swagger 2.0 only supports a limited subset of JSON schema draft 04.
			// See: https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#schema-object
			// This means that it is not possible to represent our flow schema in a Swagger 2.0
			// document because we use things like (oneOf, allOf).  The only choice here is to upgrade to
			// use Swagger 3.0, which allegedly supports them
			// See: https://blog.readme.io/an-example-filled-guide-to-swagger-3-2/#formatchanges
			// When fixed, replace with:
			var flowschema = {
				// $ref: 'http://axway.com/schemas/flowschema.json#/flow-schema'
				type: 'object'
			};

			swagger.schema('Status', Status.schema).schema('Endpoints', Endpoints.schema).schema('GroupSummary', GroupSummary.schema);

			swagger.put('/endpoints/validate').operationId('validateEndpoint').tag('endpoint').summary('Validate an endpoint and return it.').consumes('multipart/form-data').parameter({
				in: 'formData',
				name: 'file',
				description: 'Swagger JSON file to validate',
				type: 'file'
			}).parameter({
				in: 'formData',
				name: 'url',
				description: 'URL to Swagger file to validate',
				type: 'string'
			}).response(200, 'Validation completed', Endpoints.schema, false).response(400).response(413).response(500).action(function (req, res) {
				controller.validateEndpoint(req.fields, req.files).then(function (result) {
					res.setHeader('Connection', 'close');
					res.status(200).send(result);
				}).catch(function (err) {
					APIProvider.handleError(err, res, 400, 413, 500);
				});
			});

			swagger.post('/endpoints').operationId('createEndpoint').tag('endpoint').summary('Create an Endpoint from swagger').parameter({
				in: 'body',
				name: 'swagger',
				schema: Endpoints.schema,
				description: 'Swagger document',
				required: true
			}, {
				in: 'query',
				name: 'mock',
				type: 'boolean',
				description: 'Enable mocking'
			}).response(201).response(400).response(500).action(function (req, res) {
				controller.createEndpoint({
					swagger: req.body,
					mock: req.query && (req.query.mock === 'true' || req.query.mock === true) || false
				}).then(function (result) {
					res.setHeader('Location', result);
					res.status(201).send();
					controller.ctx.arrow.emit('reload');
				}).catch(function (err) {
					APIProvider.handleError(err, res, 400, 403, 500);
				});
			});

			swagger.post('/endpoints/generate').operationId('generateEndpoint').tag('endpoint').summary('Generate an endpoint.').parameter({
				in: 'body',
				name: 'endpoint',
				schema: {
					type: 'object',
					properties: {
						model: {
							type: 'string'
						},
						name: {
							type: 'string',
							description: 'The name for the endpoint.'
						},
						description: {
							type: 'string'
						}
					}
				},
				description: 'Information for endpoint generation.',
				required: true
			}).response(201, 'Endpoint was created.', null, null, {
				Location: {
					description: 'The URL to the newly created endpoint.',
					type: 'string'
				}
			}).response(404).response(500).action(function (req, res) {
				controller.generateEndpoints(req.body).then(function (result) {
					res.setHeader('Location', result);
					res.status(201).send();
					controller.ctx.arrow.emit('reload');
				}).catch(function (err) {
					APIProvider.handleError(err, res, 404, 500);
				});
			});

			swagger.get('/endpoints/summary').operationId('getEndpointSummaries').tag('endpoint').summary('Gets an array of Endpoint summaries.').response(200, 'OK', 'GroupSummary').response(500).action(function (req, res) {
				var opts = {};

				controller.getEndpointSummaries(opts).then(function (summaries) {
					res.status(200).send(summaries);
				}).catch(function (err) {
					APIProvider.handleError(err, res, 500);
				});
			});

			swagger.get('/endpoints/:group').operationId('getEndpoints').tag('endpoint').summary('Gets an array of Endpoints.').parameter({ in: 'path', name: 'group', type: 'string', description: 'API endpoint group to retrieve.' }).response(200, 'OK', 'Endpoints').response(404).response(500).action(function (req, res) {
				// decode group
				var name = decodeURIComponent(req.params.group);

				controller.getEndpoints(name).then(function (APIs) {
					res.status(200).send(APIs);
				}).catch(function (err) {
					APIProvider.handleError(err, res, 404, 500);
				});
			});

			swagger.delete('/endpoints/:group/endpoint').operationId('deleteEndpoint').tag('endpoint').summary('Deletes an endpoint from an API group').parameter({
				name: 'group',
				in: 'path',
				type: 'string',
				description: 'The API group name.',
				required: true
			}).parameter({
				name: 'endpoint',
				in: 'body',
				schema: {
					type: 'object',
					properties: {
						path: {
							type: 'string',
							description: 'The specified path to delete from.'
						},
						method: {
							type: 'string',
							description: 'The HTTP verb to delete.'
						}
					}
				},
				description: 'The API path to delete a method from.',
				required: true
			}).response(204, 'No Content').response(404).response(400).response(500).action(function (req, res) {
				var data = _extends({}, req.body);
				if (req.params.group) {
					data.group = decodeURIComponent(req.params.group);
				}
				controller.deleteEndpoint(data).then(function () {
					res.status(204).send();
					controller.ctx.arrow.emit('reload');
				}).catch(function (err) {
					APIProvider.handleError(err, res, 404, 400, 500);
				});
			});

			swagger.post('/endpoints/:group/flow').operationId('bindFlow').tag('endpoint').summary('Binds a flow to an endpoint.  The flow will be created and the `flowId` will be calculated by using the `operationId` of the endpoint, or by generating a unique id from the endpoint.  If a flow exists with the same `flowId`, the operation will return 403.').parameter({
				name: 'group',
				in: 'path',
				type: 'string',
				description: 'The API group name.',
				required: true
			}).parameter({
				name: 'bind',
				in: 'body',
				schema: {
					type: 'object',
					properties: {
						path: {
							type: 'string',
							description: 'The specified path to bind.'
						},
						method: {
							type: 'string',
							description: 'The HTTP verb to bind.'
						},
						flow: _extends({}, flowschema, {
							description: 'The flow to create.'
						})
					}
				},
				description: 'The Swagger method and path to bind to a flow.',
				required: true
			}).response(204, 'Flow successfully bound').response(400).response(403, 'Forbidden (flow already exists)').response(404).response(500).action(function (req, res) {
				var data = _extends({}, req.body);

				// decode group
				data.group = decodeURIComponent(req.params.group);

				controller.bindFlow(data).then(function () {
					res.status(204).send();
					controller.ctx.arrow.emit('reload');
				}).catch(function (err) {
					APIProvider.handleError(err, res, 400, 403, 404, 500);
				});
			});
		}
	}]);

	return EndpointsAPI;
}(APIProvider);

exports = module.exports = EndpointsAPI;