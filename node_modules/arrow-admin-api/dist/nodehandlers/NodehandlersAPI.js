'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var APIProvider = require('../APIProvider');

/**
 * API for interacting with the Nodehandlers.
 * @public
 */

var NodehandlersAPI = function (_APIProvider) {
	_inherits(NodehandlersAPI, _APIProvider);

	function NodehandlersAPI() {
		_classCallCheck(this, NodehandlersAPI);

		return _possibleConstructorReturn(this, (NodehandlersAPI.__proto__ || Object.getPrototypeOf(NodehandlersAPI)).apply(this, arguments));
	}

	_createClass(NodehandlersAPI, null, [{
		key: 'bind',

		/**
   * Bind the paths to the controller methods.
   *
   * @param {Nodehandlers} controller - The main controller providing the
   *                                         implementation for this API.
   */
		value: function bind(controller) {
			var swagger = controller.ctx.swagger;

			// https://techweb.axway.com/jira/browse/RDPP-2086
			// FIXME: Swagger 2.0 only supports a limited subset of JSON schema draft 04.
			// See: https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#schema-object
			// This means that it is not possible to represent our flow schema in a Swagger 2.0
			// document because we use things like (oneOf, allOf).  The only choice here is to upgrade to
			// use Swagger 3.0, which allegedly supports them
			// See: https://blog.readme.io/an-example-filled-guide-to-swagger-3-2/#formatchanges
			// When fixed, replace with:
			var nodeschema = {
				// $ref: 'http://axway.com/schemas/flowschema.json#/node-handler-schema'
				type: 'object'
			};

			swagger.get('/nodehandlers/:type').operationId('getNodeSpec').tag('nodehandler').summary('Gets the specification for a particular node handler.').parameter({
				in: 'path',
				name: 'type',
				type: 'string',
				description: 'type of node handler to get the spec from.'
			}).response(200, 'OK', nodeschema).response(404).response(500).action(function (req, res) {
				var type = void 0;
				if (req.params.type) {
					type = decodeURIComponent(req.params.type);
				}
				controller.getFlowNodeSpec(type).then(function (spec) {
					res.status(200).send(spec);
				}).catch(function (err) {
					APIProvider.handleError(err, res, 404, 500);
				});
			});

			swagger.get('/nodehandlers').operationId('getNodeSpecs').tag('nodehandler').summary('Gets all specification for registered node handlers.').response(200, 'OK', {
				type: 'array',
				items: _extends({}, nodeschema)
			}).response(404).response(500).action(function (req, res) {
				controller.getFlowNodeSpecs().then(function (specs) {
					res.status(200).send(specs);
				}).catch(function (err) {
					APIProvider.handleError(err, res, 404, 500);
				});
			});
		}
	}]);

	return NodehandlersAPI;
}(APIProvider);

exports = module.exports = NodehandlersAPI;