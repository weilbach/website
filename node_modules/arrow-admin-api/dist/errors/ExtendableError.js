"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * An extendable Error for use when defining exceptions.
 * @public
 * @class
 */
var ExtendableError = function (_Error) {
	_inherits(ExtendableError, _Error);

	/**
  * Create an Extendable error.
  * @constructor
  * @param {string} message - The error message.
  */
	function ExtendableError(message) {
		_classCallCheck(this, ExtendableError);

		var _this = _possibleConstructorReturn(this, (ExtendableError.__proto__ || Object.getPrototypeOf(ExtendableError)).call(this));

		_this.name = _this.constructor.name;
		_this.message = message;
		_this.stack = new Error(message).stack;
		return _this;
	}

	/**
  * Convert to a string.
  * @returns {string} error message
  */


	_createClass(ExtendableError, [{
		key: "toString",
		value: function toString() {
			return this.message;
		}
	}]);

	return ExtendableError;
}(Error);

exports = module.exports = ExtendableError;