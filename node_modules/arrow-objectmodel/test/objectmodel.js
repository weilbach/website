var expect = require('chai').expect,
	path = require('path'),
	fs = require('fs-extra'),
	Arrow = require('arrow'),
	lib = require('../'),
	tmpdir,
	server;

describe('ObjectModel', function () {

	beforeEach(function () {
		tmpdir = path.join(require('os').tmpdir(), 'omtest-' + Date.now());
		fs.mkdirsSync(tmpdir);
	});

	afterEach(function (done) {
		if (server) {
			server.stop(function () {
				fs.removeSync(tmpdir);
				done();
			});
		} else {
			done();
		}
	});

	it('[NO TICKET] should be able to serialize from running server', function (done) {
		server = new Arrow({ dir: tmpdir, logLevel: 'warn', port: 8082 });
		let err;
		server.start(function () {
			try {
				var objectModel = new lib.ObjectModel(server);
				var model = objectModel.toJSON();
				expect(model).to.be.an('object');
				expect(model).to.have.property('spec', '1');
				expect(model).to.have.property('server');
				expect(model).to.have.property('config');
				expect(model).to.have.property('apis');
				expect(model).to.have.property('connectors');
				expect(model).to.have.property('models');
				expect(model).to.have.property('blocks');
				expect(model).to.have.property('metadata');
				expect(model.server).to.have.property('port', 8082);
				expect(model.config).to.have.property('dir', tmpdir);
				expect(model.config).to.have.property('env', 'development');
				expect(model.metadata).to.have.property('type', 'unknown');
			} catch (e) {
				err = e;
			}
			server.stop((e) => {
				done(err || e);
			});
		});
	});

	it('[NO TICKET] should be able to serialize from not running server (loadOnly)', function () {
		server = new Arrow({ dir: tmpdir, logLevel: 'warn', port: 8082 }, true);
		var objectModel = new lib.ObjectModel(server);
		var model = objectModel.toJSON();
		expect(model).to.be.an('object');
		expect(model).to.have.property('spec', '1');
		expect(model).to.have.property('server');
		expect(model).to.have.property('config');
		expect(model).to.have.property('apis');
		expect(model).to.have.property('connectors');
		expect(model).to.have.property('models');
		expect(model).to.have.property('blocks');
		expect(model.server).to.have.property('port', 8082);
		expect(model.config).to.have.deep.property('dir', tmpdir);
		expect(model.config).to.have.property('env', 'development');
	});

	it('[NO TICKET] should be able to serialize model', function () {
		server = new Arrow({ dir: tmpdir, logLevel: 'warn', port: 8082 }, true);
		var MyModel = Arrow.Model.extend('foo', {
			fields: {
				readonly: { description: 'readonly', readonly: true },
				writeonly: { description: 'writeonly', writeonly: true },
				defaultfield: { description: 'default' },
				defaultvalue: { description: 'default value', default: 1, type: 'number' },
				name: { description: 'name', name: 'foo', type: String }
			}
		});
		server.addModel(MyModel);
		var objectModel = new lib.ObjectModel(server);
		var model = objectModel.toJSON();
		expect(model).to.be.an('object');
		expect(model).to.have.property('spec', '1');
		expect(model).to.have.property('server');
		expect(model).to.have.property('config');
		expect(model).to.have.property('apis');
		expect(model).to.have.property('connectors');
		expect(model).to.have.property('models');
		expect(model).to.have.property('blocks');
		expect(model.server).to.have.property('port', 8082);
		expect(model.config).to.have.deep.property('dir', tmpdir);
		expect(model.config).to.have.property('env', 'development');
		expect(model.models).to.have.property('foo');
		expect(model.models.foo).to.have.property('spec', '1');
		expect(model.models.foo).to.have.property('kind', 'model');
		expect(model.models.foo).to.have.property('name', 'foo');
		expect(model.models.foo).to.have.property('autogen', true);
		expect(model.models.foo).to.have.property('metadata');
		expect(model.models.foo).to.have.property('fields');
		expect(model.models.foo).to.have.property('actions');
		expect(model.models.foo).to.have.property('plural');
		expect(model.models.foo).to.have.property('singular');
		expect(model.models.foo.fields).to.have.property('readonly');
		expect(model.models.foo.fields.readonly).to.have.property('description', 'readonly');
		expect(model.models.foo.fields.readonly).to.have.property('required', false);
		expect(model.models.foo.fields.readonly).to.have.property('readonly', true);
		expect(model.models.foo.fields.readonly).to.have.property('writeonly', false);
		expect(model.models.foo.fields.readonly).to.have.property('optional', true);
		expect(model.models.foo.fields).to.have.property('writeonly');
		expect(model.models.foo.fields.writeonly).to.have.property('description', 'writeonly');
		expect(model.models.foo.fields.writeonly).to.have.property('required', false);
		expect(model.models.foo.fields.writeonly).to.have.property('writeonly', true);
		expect(model.models.foo.fields.writeonly).to.have.property('readonly', false);
		expect(model.models.foo.fields.writeonly).to.have.property('optional', true);
		expect(model.models.foo.fields).to.have.property('defaultfield');
		expect(model.models.foo.fields.defaultfield).to.have.property('description', 'default');
		expect(model.models.foo.fields.defaultfield).to.have.property('required', false);
		expect(model.models.foo.fields.defaultfield).to.have.property('writeonly', false);
		expect(model.models.foo.fields.defaultfield).to.have.property('readonly', false);
		expect(model.models.foo.fields.defaultfield).to.have.property('optional', true);
		expect(model.models.foo.fields).to.have.property('defaultvalue');
		expect(model.models.foo.fields.defaultvalue).to.have.property('description', 'default value');
		expect(model.models.foo.fields.defaultvalue).to.have.property('required', false);
		expect(model.models.foo.fields.defaultvalue).to.have.property('writeonly', false);
		expect(model.models.foo.fields.defaultvalue).to.have.property('readonly', false);
		expect(model.models.foo.fields.defaultvalue).to.have.property('optional', true);
		expect(model.models.foo.fields.defaultvalue).to.have.property('default', 1);
		expect(model.models.foo.fields).to.have.property('name');
		expect(model.models.foo.fields.name).to.have.property('description', 'name');
		expect(model.models.foo.fields.name).to.have.property('required', false);
		expect(model.models.foo.fields.name).to.have.property('writeonly', false);
		expect(model.models.foo.fields.name).to.have.property('readonly', false);
		expect(model.models.foo.fields.name).to.have.property('optional', true);
		expect(model.models.foo.fields.name).to.have.property('name', 'foo');
		expect(model.models.foo.fields.name).to.have.property('type', 'string');
		expect(model.models.foo.fields.defaultvalue).to.have.property('type', 'number');
	});

	it('[NO TICKET] should be able to set nickname on api', function (done) {
		server = new Arrow({ dir: tmpdir, logLevel: 'warn', port: 8082 });
		let err;
		var MyAPIGet = Arrow.API.extend({
			group: 'foo',
			method: 'GET',
			path: '/foo',
			nickname: 'fooget',
			description: 'foo',
			action: function (req, resp, next) {} // eslint-disable-line
		});
		var MyAPIPut = Arrow.API.extend({
			group: 'foo',
			method: 'PUT',
			path: '/foo',
			nickname: 'fooput',
			description: 'foo',
			action: function (req, resp, next) {} // eslint-disable-line
		});
		server.addAPI(MyAPIGet);
		server.addAPI(MyAPIPut);
		server.start(function (er) {
			try {
				expect(er).to.not.be.ok;
				var api1 = server.getAPI('/foo', 'GET');
				expect(api1.nickname).to.be.eql('fooget');
				var api2 = server.getAPI('/foo', 'PUT');
				expect(api2.nickname).to.be.eql('fooput');

				var API = require('../lib/api');
				var api = new API(server, api1);
				api = api.toJSON();
				expect(api).to.have.property('spec', '1');
				expect(api).to.have.property('kind', 'api');
				expect(api).to.have.property('name', 'GET /foo');
				expect(api).to.have.property('description', 'foo');
				expect(api).to.have.property('path', '/foo');
				expect(api).to.have.property('method', 'GET');
				expect(api).to.have.property('generated', false);
				expect(api).to.have.property('nickname', 'fooget');
				expect(api).to.have.property('action');
				expect(api.action).to.have.property('name', 'action');
				expect(api.action).to.have.deep.property('args', [ 'req', 'resp', 'next' ]);
				expect(api.action).to.have.property('body', '');

				api = new API(server, api2);
				api = api.toJSON();
				expect(api).to.have.property('spec', '1');
				expect(api).to.have.property('kind', 'api');
				expect(api).to.have.property('name', 'PUT /foo');
				expect(api).to.have.property('description', 'foo');
				expect(api).to.have.property('path', '/foo');
				expect(api).to.have.property('method', 'PUT');
				expect(api).to.have.property('generated', false);
				expect(api).to.have.property('nickname', 'fooput');
				expect(api).to.have.property('action');
				expect(api.action).to.have.property('name', 'action');
				expect(api.action).to.have.deep.property('args', [ 'req', 'resp', 'next' ]);
				expect(api.action).to.have.property('body', '');
			} catch (e) {
				err = e;
			}
			server.stop((e) => {
				done(err || e);
			});
		});
	});

	it('[NO TICKET] should be able to hide apis', function (done) {
		server = new Arrow({ dir: tmpdir, logLevel: 'warn', port: 8082 });
		let err;
		var MyAPIGet = Arrow.API.extend({
			group: 'foo',
			method: 'GET',
			path: '/foo',
			documented: false,
			nickname: 'fooget',
			description: 'foo',
			action: function (req, resp, next) {} // eslint-disable-line
		});
		server.addAPI(MyAPIGet);
		server.start(function (er) {
			try {
				expect(er).to.not.be.ok;
				var api1 = server.getAPI('/foo', 'GET');
				expect(api1.nickname).to.be.eql('fooget');

				var API = require('../lib/api');
				var api = new API(server, api1);
				api = api.toJSON();
				expect(api).to.have.property('spec', '1');
				expect(api).to.have.property('kind', 'api');
				expect(api).to.have.property('name', 'GET /foo');
				expect(api).to.have.property('description', 'foo');
				expect(api).to.have.property('path', '/foo');
				expect(api).to.have.property('method', 'GET');
				expect(api).to.have.property('generated', false);
				expect(api).to.have.property('documented', false);
				expect(api).to.have.property('nickname', 'fooget');
				expect(api).to.have.property('action');
				expect(api.action).to.have.property('name', 'action');
				expect(api.action).to.have.deep.property('args', [ 'req', 'resp', 'next' ]);
				expect(api.action).to.have.property('body', '');
			} catch (e) {
				err = e;
			}
			server.stop((e) => {
				done(err || e);
			});
		});
	});

});
