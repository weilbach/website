"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * A registry of the flow node handlers by type.
 * @public
 * @class
 */
var NodeRegistry = function () {
	/**
  * Create the node registry.
  * @constructor
  */
	function NodeRegistry() {
		_classCallCheck(this, NodeRegistry);

		this.init();
	}

	/**
  * Initialize the node handler cache.
  * @public
  */


	_createClass(NodeRegistry, [{
		key: "init",
		value: function init() {
			this.nodeHandlers = {};
		}

		/**
   * Allow dynamic extension of the supported node types.
   * @public
   * @param {string} type - The type of the handler.
   * @param {FlowNode} handler - A FlowNode type that has the business logic for this node type.
   * @param {object} spec - The node handler definition.
   */

	}, {
		key: "registerNode",
		value: function registerNode(type, handler, spec) {
			if (this.nodeHandlers.hasOwnProperty(type)) {
				throw new ReferenceError("node handler type already registered: " + type);
			}
			this.nodeHandlers[type] = { handler: handler, spec: spec };
		}

		/**
   * Dynamically unregister a supported node type.
   * @public
   * @param {string} uri - The unique uri of the node the handler to unregister
   *						 (see `formatNodeHandlerUri`).
   */

	}, {
		key: "unregisterNode",
		value: function unregisterNode(uri) {
			if (!this.nodeHandlers.hasOwnProperty(uri)) {
				return;
			}
			delete this.nodeHandlers[uri];
		}

		/**
   * Gets a node handler by uri.
   * @public
   * @param {string} uri - The unique uri of the node the handler to unregister
   *						 (see `formatNodeHandlerUri`).
   * @return {FlowNode} The node handler.
   */

	}, {
		key: "getRegisteredNode",
		value: function getRegisteredNode(uri) {
			if (!this.nodeHandlers.hasOwnProperty(uri)) {
				throw new ReferenceError("Unknown node handler: " + uri);
			}
			return this.nodeHandlers[uri].handler;
		}

		/**
   * Create an instance of the node type handler.
   * @public
   * @param {string} id - The id of the node.
   * @param {object} node - The definition for the node.
   * @param {Flow} flow - The flow parenting the node.
   * @returns {NodeHandler} the created NodeHandler
   */

	}, {
		key: "create",
		value: function create(id, node, flow) {
			if (!this.nodeHandlers[node.type]) {
				throw new Error("Cannot create '" + id + "' in '" + flow.id + "' flow. No flow handler registered to handle type '" + node.type + "'.");
			}
			var NodeHandler = this.nodeHandlers[node.type].handler;
			return new NodeHandler(id, node, this.getNodeSpec(node.type), flow);
		}

		/**
   * Gets the node handler definition.
   * @public
   * @param {string} uri - The unique uri of the node the handler to unregister
   *						 (see `formatNodeHandlerUri`).
   * @returns {object} node handler spec
   */

	}, {
		key: "getNodeSpec",
		value: function getNodeSpec(uri) {
			if (!this.nodeHandlers.hasOwnProperty(uri)) {
				throw new ReferenceError("Unknown node handler: " + uri);
			}
			var spec = this.nodeHandlers[uri].spec;
			if (spec.type !== uri) {
				throw new Error("Mismatch between registered uri '" + uri + "' and the spec type '" + spec.type + "'");
			}
			return spec;
		}

		/**
   * Gets all of the available node handler specs.
   * @public
   * @returns {object|array} The node handler specs.
   */

	}, {
		key: "getNodeSpecs",
		value: function getNodeSpecs() {
			var _this = this;

			return Object.keys(this.nodeHandlers).reduce(function (specs, uri) {
				specs[uri] = _this.getNodeSpec(uri);
				return specs;
			}, {});
		}
	}]);

	return NodeRegistry;
}();

exports = module.exports = new NodeRegistry();