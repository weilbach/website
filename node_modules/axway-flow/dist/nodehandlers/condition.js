'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var FlowNode = require('../flownode');
var FlowManager = require('../flowmanager');
var deepEqual = require('deep-equal');

/**
 * Condition node for testing attributes.
 *
 * @example <caption>Example flow node</caption>
 * "step.1": {
 *   "type": "nodehandler://axway-flow/condition",
 *   "method": "equals",
 *   "parameters": [{
 *     "name": "source",
 *     "value": "$.data.species|0"
 *   }, {
 *     "name": "value",
 *     "value": "homo sapien",
 *     "type": "string"
 *   }],
 *   "response": {
 *     "true": { },
 *     "false": { },
 *   }
 * }
 */

var Condition = function (_FlowNode) {
	_inherits(Condition, _FlowNode);

	function Condition() {
		_classCallCheck(this, Condition);

		return _possibleConstructorReturn(this, (Condition.__proto__ || Object.getPrototypeOf(Condition)).apply(this, arguments));
	}

	_createClass(Condition, [{
		key: 'exists',
		value: function exists(req, cb) {
			var result = req.params.source !== undefined;
			cb['' + result](null, result);
		}
	}, {
		key: 'equals',
		value: function equals(req, cb) {
			var output = deepEqual(req.params.source, req.params.value, { strict: true });
			cb['' + output](null, output);
		}
	}, {
		key: 'less-than',
		value: function lessThan(req, cb) {
			var output = req.params.source < req.params.value;
			cb['' + output](null, output);
		}
	}, {
		key: 'less-than-equal',
		value: function lessThanEqual(req, cb) {
			var output = req.params.source <= req.params.value;
			cb['' + output](null, output);
		}
	}, {
		key: 'greater-than',
		value: function greaterThan(req, cb) {
			var output = req.params.source > req.params.value;
			cb['' + output](null, output);
		}
	}, {
		key: 'greater-than-equal',
		value: function greaterThanEqual(req, cb) {
			var output = req.params.source >= req.params.value;
			cb['' + output](null, output);
		}
	}]);

	return Condition;
}(FlowNode);

function getConditionSpec() {
	return {
		schemaVersion: '1',
		type: FlowManager.formatNodeHandlerUri('axway-flow', 'condition'),
		name: 'Condition',
		icon: 'icon-GG-if-then',
		category: 'core',
		methods: {
			exists: {
				name: 'Exists',
				description: 'Tests a value exists, true or false.',
				parameter: {
					type: 'object',
					properties: {
						source: {
							description: 'The input to test.'
						}
					},
					required: ['source'],
					additionalProperties: false
				},
				outputs: {
					true: {
						name: 'True',
						description: 'The condition tested true.',
						context: '$.exists',
						schema: {
							type: 'boolean'
						}
					},
					false: {
						name: 'False',
						description: 'The condition tested false.',
						context: '$.exists',
						schema: {
							type: 'boolean'
						}
					}
				}
			},
			equals: {
				name: 'Equals',
				description: 'Tests a value is equal.',
				parameter: {
					type: 'object',
					properties: {
						source: {
							description: 'The input to test.',
							minLength: 1
						},
						value: {
							description: 'The value to test input against.',
							minLength: 1
						}
					},
					required: ['source', 'value'],
					additionalProperties: false
				},
				outputs: {
					true: {
						name: 'True',
						description: 'The condition tested true.',
						context: '$.equals',
						schema: {
							type: 'boolean'
						}
					},
					false: {
						name: 'False',
						description: 'The condition tested false.',
						context: '$.equals',
						schema: {
							type: 'boolean'
						}
					}
				}
			},
			'less-than': {
				name: 'Less Than',
				description: 'Tests a value is less than another.',
				parameter: {
					type: 'object',
					properties: {
						source: {
							description: 'The input to test.',
							minLength: 1
						},
						value: {
							description: 'The value to test input against.',
							minLength: 1
						}
					},
					required: ['source', 'value'],
					additionalProperties: false
				},
				outputs: {
					true: {
						name: 'True',
						description: 'The condition tested true.',
						context: '$.lessThan',
						schema: {
							type: 'boolean'
						}
					},
					false: {
						name: 'False',
						description: 'The condition tested false.',
						context: '$.lessThan',
						schema: {
							type: 'boolean'
						}
					}
				}
			},
			'less-than-equal': {
				name: 'Less Than or Equal',
				description: 'Tests a value is less than or equal to another.',
				parameter: {
					type: 'object',
					properties: {
						source: {
							description: 'The input to test.',
							minLength: 1
						},
						value: {
							description: 'The value to test input against.',
							minLength: 1
						}
					},
					required: ['source', 'value'],
					additionalProperties: false
				},
				outputs: {
					true: {
						name: 'True',
						description: 'The condition tested true.',
						context: '$.lessThanEqual',
						schema: {
							type: 'boolean'
						}
					},
					false: {
						name: 'False',
						description: 'The condition tested false.',
						context: '$.lessThanEqual',
						schema: {
							type: 'boolean'
						}
					}
				}
			},
			'greater-than': {
				name: 'Greater Than',
				description: 'Tests a value is greater than another.',
				parameter: {
					type: 'object',
					properties: {
						source: {
							description: 'The input to test.',
							minLength: 1
						},
						value: {
							description: 'The value to test input against.',
							minLength: 1
						}
					},
					required: ['source', 'value'],
					additionalProperties: false
				},
				outputs: {
					true: {
						name: 'True',
						description: 'The condition tested true.',
						context: '$.greaterThan',
						schema: {
							type: 'boolean'
						}
					},
					false: {
						name: 'False',
						description: 'The condition tested false.',
						context: '$.greaterThan',
						schema: {
							type: 'boolean'
						}
					}
				}
			},
			'greater-than-equal': {
				name: 'Greater Than or Equal',
				description: 'Tests a value is greater than or equal to another.',
				parameter: {
					type: 'object',
					properties: {
						source: {
							description: 'The input to test.',
							minLength: 1
						},
						value: {
							description: 'The value to test input against.',
							minLength: 1
						}
					},
					required: ['source', 'value'],
					additionalProperties: false
				},
				outputs: {
					true: {
						name: 'True',
						description: 'The condition tested true.',
						context: '$.greaterThanEqual',
						schema: {
							type: 'boolean'
						}
					},
					false: {
						name: 'False',
						description: 'The condition tested false.',
						context: '$.greaterThanEqual',
						schema: {
							type: 'boolean'
						}
					}
				}
			}

		}
	};
}

exports = module.exports = {
	handler: Condition,
	spec: getConditionSpec
};