'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var FlowNode = require('../flownode');
var FlowManager = require('../flowmanager');

/**
 * Output values so that they can be set on the context.
 * Example node:
 *
 *        "step.1": {
 *           "type": "setcontext",
 *           "parameters": [{
 *              "name": "value",
 *              "value": "$.foo|0"
 *           }],
 *           "outputs": {
 *               "next": {
 *                   "context": "$.bar",
 *                   "routes": [ "step.2" ]
 *           }
 *       }
 */

var SetContext = function (_FlowNode) {
	_inherits(SetContext, _FlowNode);

	function SetContext() {
		_classCallCheck(this, SetContext);

		return _possibleConstructorReturn(this, (SetContext.__proto__ || Object.getPrototypeOf(SetContext)).apply(this, arguments));
	}

	_createClass(SetContext, [{
		key: 'setcontext',
		value: function setcontext(req, cb) {
			cb.next(null, req.params.value);
		}
	}]);

	return SetContext;
}(FlowNode);

function getSpec() {
	return {
		schemaVersion: '1',
		type: FlowManager.formatNodeHandlerUri('axway-flow', 'setcontext'),
		name: 'Set Context',
		icon: 'icon-GG-copy',
		category: 'core',
		methods: {
			setcontext: {
				name: 'Set Context',
				description: 'Echo the input paramter to the output to allow them to be set in the context.',
				parameter: {
					type: 'object',
					properties: {
						value: {}
					},
					required: ['value'],
					additionalProperties: false
				},
				outputs: {
					next: {
						name: 'Next'
					}
				}
			}
		}
	};
}

exports = module.exports = {
	handler: SetContext,
	spec: getSpec
};