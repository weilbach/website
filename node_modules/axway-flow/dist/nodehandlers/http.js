'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var FlowNode = require('../flownode');
var FlowManager = require('../flowmanager');

/**
 * Outputs a value that contains:
 * { status: number, headers: array, body: object|string}
 *
 * Example node:
 *
 */

var HTTP = function (_FlowNode) {
	_inherits(HTTP, _FlowNode);

	function HTTP() {
		_classCallCheck(this, HTTP);

		return _possibleConstructorReturn(this, (HTTP.__proto__ || Object.getPrototypeOf(HTTP)).apply(this, arguments));
	}

	_createClass(HTTP, [{
		key: 'setresponse',
		value: function setresponse(req, cb) {
			var resp = { status: req.params.status };
			if (req.params.headers !== undefined) {
				resp.headers = req.params.headers;
			}
			if (req.params.body !== undefined) {
				resp.body = req.params.body;
			}
			cb.next(null, resp);
		}
	}]);

	return HTTP;
}(FlowNode);

var httpResponseProperties = {
	status: {
		type: 'integer',
		minimum: 100,
		maximum: 599
	},
	headers: {
		type: 'object',
		properties: {},
		additionalProperties: true
	},
	body: {}
};

function getSpec() {
	return {
		schemaVersion: '1',
		type: FlowManager.formatNodeHandlerUri('axway-flow', 'http'),
		name: 'HTTP',
		icon: 'icon-GG-response',
		category: 'core',
		methods: {
			setresponse: {
				name: 'Set HTTP Response',
				description: 'Set the HTTP response object.',
				parameter: {
					type: 'object',
					properties: httpResponseProperties,
					required: ['status'],
					additionalProperties: false
				},
				outputs: {
					next: {
						name: 'Next',
						context: '$.response',
						schema: {
							type: 'object',
							properties: httpResponseProperties
						}
					}
				}
			}
		}
	};
}

exports = module.exports = {
	handler: HTTP,
	spec: getSpec
};