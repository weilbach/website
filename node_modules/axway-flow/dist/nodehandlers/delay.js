'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var FlowNode = require('../flownode');
var FlowManager = require('../flowmanager');

/**
 * Causes the flow to wait for a certain amount of time before continuing to the next node.
 * Configuration:
 *  delay: The length of time the node should wait (ms)
 */

var Delay = function (_FlowNode) {
	_inherits(Delay, _FlowNode);

	function Delay() {
		_classCallCheck(this, Delay);

		return _possibleConstructorReturn(this, (Delay.__proto__ || Object.getPrototypeOf(Delay)).apply(this, arguments));
	}

	_createClass(Delay, [{
		key: 'delay',
		value: function delay(req, cb) {
			setTimeout(function () {
				return cb.next();
			}, req.params.delay);
		}
	}]);

	return Delay;
}(FlowNode);

function getDelaySpec() {
	return {
		schemaVersion: '1',
		type: FlowManager.formatNodeHandlerUri('axway-flow', 'delay'),
		name: 'Delay',
		icon: 'icon-GG-clock3',
		category: 'core',
		methods: {
			delay: {
				name: 'Delay',
				description: 'Wait for a certain amount of time before continuing to the next node.',
				parameter: {
					type: 'object',
					properties: {
						delay: {
							type: 'integer',
							description: 'The length of delay, in milliseconds.'
						}
					},
					required: ['delay'],
					additionalProperties: false
				},
				outputs: {
					next: {
						name: 'Next',
						description: 'The delay completed.',
						context: '$.delayed',
						schema: {
							type: 'integer'
						}
					}
				}
			}
		}
	};
}

exports = module.exports = {
	handler: Delay,
	spec: getDelaySpec
};