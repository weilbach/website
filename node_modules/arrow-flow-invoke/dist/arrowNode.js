'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _require = require('axway-flow'),
    FlowNode = _require.FlowNode;

var ArrowNode = function (_FlowNode) {
	_inherits(ArrowNode, _FlowNode);

	function ArrowNode(arrow, name, node, spec, flow) {
		_classCallCheck(this, ArrowNode);

		var _this = _possibleConstructorReturn(this, (ArrowNode.__proto__ || Object.getPrototypeOf(ArrowNode)).call(this, name, node, spec, flow));

		_this.arrow = arrow;
		return _this;
	}

	return ArrowNode;
}(FlowNode);

exports = module.exports = ArrowNode;