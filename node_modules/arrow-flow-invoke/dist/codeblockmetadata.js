'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var fs = require('fs');
var path = require('path');
var parseJson = require('parse-json');
var schemas = require('axway-schema');

function upgradeV0toV1(fn, meta, options) {
	if (meta.schemaVersion >= '1') {
		return;
	}
	// bump version
	var logger = options && options.logger;
	meta.schemaVersion = '1';
	logger && logger.debug('Upgrading codeblock ' + fn);
	if (options && options.save) {
		fs.writeFileSync(fn, JSON.stringify(meta, null, 4), 'utf-8');
	}
	return meta;
}

function upgrade(fn, meta, options) {
	if (!meta.schemaVersion) {
		return upgradeV0toV1(fn, meta, options);
	}
	return meta;
}

var CodeblockMetadata = function () {
	function CodeblockMetadata() {
		_classCallCheck(this, CodeblockMetadata);
	}

	_createClass(CodeblockMetadata, null, [{
		key: 'load',

		/**
   * Loads a codeblock metadata file.  `options` are as follows:
   * - `logger`: a logger object
   * - `validator`: a validator object
   * - `save`: a boolean to enable saving upgraded file (disabled by default)
   * @public
   * @param {string} codeblockPath - A path to a codeblock metadata file.
   * @param {object} [options] - Options.
   * @returns {object} The parsed and upgraded metadata object.
   */
		value: function load(codeblockPath, options) {
			return new Promise(function (resolve, reject) {
				return fs.readFile(codeblockPath, function (err, data) {
					var name = path.basename(codeblockPath, path.extname(codeblockPath));

					if (err) {
						reject(err);
						return;
					}

					// Check if its a valid JSON
					var codeblock = void 0;
					try {
						codeblock = parseJson(data.toString(), codeblockPath);
					} catch (ex) {
						return reject(new Error('Unable to load codeblock ' + name + '. ' + ex.message));
					}

					// Parse and upgrade metadata
					var metadata = upgrade(codeblockPath, codeblock, options);

					// Validate the codeblock metadata
					var error = schemas.validate('http://axway.com/schemas/codeblockmetadata.json', metadata);
					if (error) {
						reject(new Error('Unable to load codeblock ' + name + ' in ' + codeblockPath + ': ' + error));
					}

					resolve(metadata);
				});
			});
		}
	}]);

	return CodeblockMetadata;
}();

exports = module.exports = CodeblockMetadata;