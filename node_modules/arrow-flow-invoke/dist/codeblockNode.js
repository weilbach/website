'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ArrowNode = require('./arrowNode');

var _require = require('axway-flow'),
    FlowManager = _require.FlowManager;

var CodeblockNode = function (_ArrowNode) {
	_inherits(CodeblockNode, _ArrowNode);

	function CodeblockNode(arrow, name, node, spec, flow) {
		_classCallCheck(this, CodeblockNode);

		var _this = _possibleConstructorReturn(this, (CodeblockNode.__proto__ || Object.getPrototypeOf(CodeblockNode)).call(this, arrow, name, node, spec, flow));

		_this.codeblockName = node.method;
		if (_this.codeblockName) {
			_this.codeblock = _this.arrow.getCodeblock(_this.codeblockName);
			_this[_this.codeblockName] = function (req, cb) {
				_this.codeblock.action(_this.arrow, req.params, cb);
			};
		}
		return _this;
	}

	return CodeblockNode;
}(ArrowNode);

/**
 * Returns the schema function for CodeblockNode.  Is bound to arrow to
 * query the list of codeblocks.
 * @param {Arrow} arrow - the arrow instance
 * @returns {object} generated node handler spec
 */


var getCodeblockNodeSpec = function getCodeblockNodeSpec(arrow) {
	arrow.logger && arrow.logger.trace && arrow.logger.trace('Generating Codelbock spec');
	var schema = {
		schemaVersion: '1',
		type: FlowManager.formatNodeHandlerUri('arrow-flow-invoke', 'codeblock'),
		name: 'Codeblock',
		icon: 'icon-GG-code',
		category: 'core',
		methods: {}
	};
	var codeblocks = arrow.getCodeblocks();
	for (var name in codeblocks) {
		if (codeblocks.hasOwnProperty(name)) {
			arrow.logger && arrow.logger.trace && arrow.logger.trace('  adding Codelbock method to spec: ' + name);
			var codeblock = codeblocks[name];
			var cb = schema.methods[name] = Object.assign({}, codeblock);
			// remove bits of metadata for codeblock that are not spec
			delete cb.schemaVersion;
			delete cb.path;
			delete cb.name;
		}
	}
	return schema;
};

exports = module.exports = {
	handler: CodeblockNode,
	spec: getCodeblockNodeSpec
};