'use strict';

var _require = require('axway-flow'),
    FlowManager = _require.FlowManager;

module.exports = {
	id: 'upgradeV1toV2',
	type: 'flow',
	stage: 'pre',
	from: '1',
	to: '2',
	owner: 'arrow-flow-invoke',
	fn: function fn(flowDef) {
		// pre-upgrade step, specific to arrow-flow-invoke
		var _iteratorNormalCompletion = true;
		var _didIteratorError = false;
		var _iteratorError = undefined;

		try {
			for (var _iterator = Object.keys(flowDef.nodes)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
				var id = _step.value;

				var node = flowDef.nodes[id];
				// codeblock nodes should use $.method, not config
				if (node.type === 'Codeblock' && node.config.method) {
					node.method = node.config.method;
					delete node.config.method;
				}
				// upgrade the node type to use a URI in version 2
				if (['Codeblock', 'ModelCount', 'ModelCreate', 'ModelDelete', 'ModelDeleteAll', 'ModelDistinct', 'ModelFindAll', 'ModelFindAndModify', 'ModelFindByID', 'ModelQuery', 'ModelUpdate', 'ModelUpsert'].indexOf(node.type) >= 0) {
					node.type = FlowManager.formatNodeHandlerUri('arrow-flow-invoke', node.type);
				}
			}
		} catch (err) {
			_didIteratorError = true;
			_iteratorError = err;
		} finally {
			try {
				if (!_iteratorNormalCompletion && _iterator.return) {
					_iterator.return();
				}
			} finally {
				if (_didIteratorError) {
					throw _iteratorError;
				}
			}
		}

		return Promise.resolve(flowDef);
	}
};