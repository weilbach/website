'use strict';

var _require = require('./codeblockNode'),
    CodeblockNode = _require.handler,
    CodeblockNodeSpec = _require.spec;

var _require2 = require('./arrowModelNode'),
    ArrowModelNode = _require2.handler,
    ArrowModelNodeSpec = _require2.spec;

var CodeblockMetadata = require('./codeblockmetadata');
var schemas = require('axway-schema');
var metadata = require('../codeblockmetadata.json');
var upgrade = require('./upgrade');

var registeredNodeHandlers = {
	models: [],
	legacyModel: []
};

// setup schemas. axway-schema already has flowschema.json loaded from axway-flow
schemas.register(metadata).loadSync();

function _registerCodeblockNodeHandler(arrow) {
	var uri = arrow.flowManager.formatNodeHandlerUri('arrow-flow-invoke', 'codeblock');
	arrow.flowManager.registerNode(uri, CodeblockNode.bind(null, arrow), CodeblockNodeSpec.bind(null, arrow));
}

function _unregisterCodeblockNodeHandler(arrow) {
	var uri = arrow.flowManager.formatNodeHandlerUri('arrow-flow-invoke', 'codeblock');
	arrow.flowManager.unregisterNode(uri);
}

function _registerModelNodeHandler(arrow) {
	Object.keys(arrow.models).forEach(function (modelName) {
		var model = arrow.getModel(modelName, true);
		var uri = arrow.flowManager.formatNodeHandlerUri('arrow-flow-invoke', 'model/' + modelName);
		arrow.flowManager.registerNode(uri, ArrowModelNode.bind(null, arrow, model), ArrowModelNodeSpec.bind(null, arrow, model));
		registeredNodeHandlers.models.push(uri);
	});
}

function _unregisterModelNodeHandler(arrow) {
	registeredNodeHandlers.models.forEach(function (uri) {
		arrow.flowManager.unregisterNode(uri);
	});
	registeredNodeHandlers.models = [];
}

function register(arrow) {
	upgrade.register(arrow);
	_registerCodeblockNodeHandler(arrow);
	_registerModelNodeHandler(arrow);
}

function unregister(arrow) {
	upgrade.unregister(arrow);
	_unregisterCodeblockNodeHandler(arrow);
	_unregisterModelNodeHandler(arrow);
}

exports = module.exports = {
	register: register,
	unregister: unregister,
	CodeblockMetadata: CodeblockMetadata
};